"""
Functions written to assist and make possible the automation found in meta.py.
Author: Tristan Mansfield (except for the parts stolen from SISO_TX.py)
"""

##############################
#           Imports          #
##############################

import sys
sys.path.append('/home/argos/Desktop/renew-software-master/PYTHON/IrisUtils/') #TODO: Make these paths relative.
sys.path.append('/home/argos/Desktop/renew-software-master/PYTHON/IrisUtils/data_in/')
import visa
import numpy as np
import time
import datetime
import os
import math
import signal
import threading
import matplotlib.pyplot as plt
import json
import pdb
from SoapySDR import *              # SOAPY_SDR_ constants
from optparse import OptionParser
from functools import partial
from type_conv import *
from print_sensor import *
from generate_sequence import *
import pandas as pd

##############################
#          Functions         #
##############################


def one_sweep(devicename):
    """
    Performs a single sweep on the SA and waits for its completion.
    :param devicename: The name of the SA, typically call this 'device'
    :return: None
    """

    devicename.write("initiate:immediate")
    devicename.write("*OPC")
    return()

def read1(devicename):
    """
    A non-ideal way to read the output from the SA, reads the data one byte at a time until it times out, then catches
    that timeout and prints/returns the read data.  Note: b/c this waits for the timeout to figure out that it's done,
    it tends to take a while (how long is the timeout?).
    #NOTE: Obsolete, read_raw() method works much better.
    :param devicename: The name of the SA, typically call this 'device'
    :return: String of data currently being read from devicename
    """
    str_data = ''
    try:
        while True:
            str_data = str_data + (devicename.read_bytes(1))
    except visa.VisaIOError as e:
        if str(e.error_code) == 'StatusCode.error_timeout':
            if str_data == '':
                print ("No data returned before timeout.")
        else:
            print("Non-timeout VisaIOError, you should panic.")
    finally:
        return(str_data)

def IDN_test(devicename):
    """
    Simple test that should return/print information about the SA, should be exactly 40 bytes
    :param devicename: The name of the SA, typically call this 'device'
    :return: None
    """
    string = ''
    devicename.write("*IDN?")
    string = devicename.read_raw()
    if string == '':
        raise("Device didn't return anything in IDN_test")
    else:
        print(string)
        return(string)

def chpower1(devicename, freq, chwidth="600kHz", trace_type="MAXHOLD", trace_num=6, trace_conf=False):
    """
    Read and return the channel power data from devicename at the specified freq, channel width, and trace type.
    NOTE: This is also nearly obsolete, as it's easier to simply do this manually.
    :param devicename: The name of the SA, typically call this 'device'
    :param freq: The frequency to center the reading at.
    :param chwidth: The width of the channel to measure.
    :param trace_type: The type of trace to measure from (see list).
    :param trace_num: The desired trace to read data from (and configure if trace_conf is True).
    :param trace_conf: True if you want the desired trace to be configured according to trace_type.
    :return: Channel power data as a string.
    """

    trace_list=[1, 2, 3, 4, 5, 6]
    type_list = ['OFF', 'WRITE', 'AVERAGE', 'MAXHOLD', 'MINHOLD', 'MINMAX', 'writ', 'aver', 'max', 'min']

    typeflag = False

    ###In Python3, replace "lower" with "casefold"
    for typestr in type_list:
        if trace_type.casefold() == typestr.casefold():
            typeflag = True

    trace_flag = False
    for i in trace_list:
        if trace_num == i:
            trace_flag = True

    #TODO: Add assertException for devicename?
    assert (type(freq) == str), ("freq should be string in 'NumberSuffix' format, such as '2.4GHz'.")
    assert (type(chwidth) == str), ("chwidth should be string in 'NumberSuffix' format, such as '2.4GHz'.")
    assert (typeflag), ("trace_type can only be: 'OFF', 'WRITE', 'AVERAGE', 'MAXHOLD', 'MINHOLD', 'MINMAX'")
    assert (trace_flag), ("trace_num can only be an integer from 1 to 6")
    assert (type(trace_conf) == bool), ("trace_conf must be a boolean")


    ###Configure the selected trace if trace_conf is True
    devicename.write(":trace:select " + str(trace_num))
    if trace_conf:
        devicename.write(":trace:type " + trace_type)
        devicename.write(":trace:update:state:on")
        devicename.write(":trace:display:state:on")

    ###Choose center freq (channel power is centered at the center of the span).
    devicename.write(":sense:freq:center " + freq)

    ###Configure the channel power
    devicename.write(":sense:chpower:state on")
    devicename.write(":sense:chpower:trace " + str(trace_num))
    devicename.write(":sense:chpower:width " + str(chwidth))
    devicename.write(":sense:chpower:count 1")

    ###Must make a sweep before reading
    one_sweep(devicename)
    devicename.write(":sense:chpower:chpower? 0")
    # to_ret = read1(devicename)
    to_ret = devicename.read_raw()
    # print (to_ret)
    tup = (freq, to_ret)
    # print (tup)
    return(tup)

def change(sdr, rate=5000000, ampl=0.5, ant="A", gain=15, freq=3.6e9, PA2=0, IAMP=0):
    """
    Mostly just copied from siggen_apps from SISO_TX.py, but reduced to only the portions we need to actually update
    an existing, rather than start a new, transmission.
    :param sdr: The SoapySDR object corresponding to the Iris being tested.
    :param rate:
    :param ampl:
    :param ant: The antenna to broadcast from, must be a string: 'A', 'B' or 'AB'.
    :param gain: The base PAD gain (float or int).
    :param freq: The freq. to broadcast at, integer.
    :param PA2:
    :param IAMP:
    :return: None
    """
    ###Constants that "shouldn't" change:
    bbfreq=0
    waveFreq=None
    numSamps=1024
    lo_tone=True


    info = sdr.getHardwareInfo()
    amplFixed = int(ampl*(1 << 13))

    ###Setting ant.
    if ant == 'A':
        txChannel = [0]
    elif ant == 'B':
        txChannel = [1]
    elif ant == 'AB':
        txChannel = [0, 1]
    else:
        txChannel = []

    for c in txChannel:
        # print("Writing settings for channel {}".format(c))
        sdr.setFrequency(SOAPY_SDR_TX, c, "RF", freq+bbfreq)
        sdr.setSampleRate(SOAPY_SDR_TX, c, rate)
        sdr.setFrequency(SOAPY_SDR_TX, c, "BB", bbfreq)
        sdr.setAntenna(SOAPY_SDR_TX, c, "TRX")
        if lo_tone:
            sdr.writeSetting(SOAPY_SDR_TX, c, 'TSP_TSG_CONST', str(amplFixed))
            sdr.writeSetting(SOAPY_SDR_TX, c, 'TX_ENB_OVERRIDE', 'true')
        if "CBRS" in info["frontend"]:
            # print("set CBRS front-end gains")
            sdr.setGain(SOAPY_SDR_TX, c, 'ATTN', 0)  # {-18,-12,-6,0}
            sdr.setGain(SOAPY_SDR_TX, c, 'PA2', PA2)   # LO: [0|17], HI:[0|14]
        sdr.setGain(SOAPY_SDR_TX, c, 'IAMP', IAMP)      # [-12,12]
        sdr.setGain(SOAPY_SDR_TX, c, "PAD", gain)

    # Generate TX signal
    txSignal = np.empty(numSamps).astype(np.complex64)
    wbz = txSignal
    # Sine Waveform
    Ts = 1 / rate
    if waveFreq is None:
        waveFreq = rate / 20
    x = 20
    numSamps = int(x * rate / waveFreq)  # x period worth of samples
    s_freq = waveFreq
    s_time_vals = np.array(np.arange(0, numSamps)).transpose() * Ts
    txSignal = np.exp(s_time_vals * 1j * 2 * np.pi * s_freq).astype(np.complex64) * ampl

def initialize(devicename, span="500kHz", chwidth="100kHz"):
    """
    This sets SA settings that don't change, namely, the span, the width of the channel, and turns off continuous
    scanning.
    :param devicename: The name of the SA, typically call this 'device'
    :param span: The freq. span which the SA should have (affects the noise floor)
    :param chwidth: The width of the channel whose power is measured.
    :return: None
    """

    ###Beginning communicaitons

    assert(IDN_test(devicename) != ''), ("The device did not respond to IDN_test")
    ###Setting basic SA settings that shouldn't change.

    devicename.write("instrument:select SA")

    devicename.write(":SENSE:FREQ:SPAN " + span)

    devicename.write(":chpower:state on")
    devicename.write(":chpower:trace 1")
    devicename.write(":chpower:width " + chwidth)
    devicename.write(":chpower:count 1")

    devicename.write("INITIATE:CONTINUOUS OFF")
    one_sweep(devicename)

    ###For testing purposes
    devicename.write(":chpower:chpower? 0")
    try:
        devicename.read_raw()
    except:
        raise("Device couldn't read after initialization query.")

def initialize2(devicename, span="500kHz", chwidth="100kHz"):
    """
    Sets SA settings that don't change, but for the 'long' form of meta.py and mini_meta.py (sets up traces 1, 2, 3, 6)
    :param devicename: The name of the SA, typically call this 'device'
    :param span: The freq. span which the SA should have (affects the noise floor)
    :param chwidth: The width of the channel whose power is measured.
    :return: None
    """

    ###Beginning communicaitons

    assert (IDN_test(devicename) != ''), ("The device did not respond to IDN_test")

    devicename.write("instrument:select SA")

    devicename.write("INITIATE:CONTINUOUS OFF")

    devicename.write(":SENSE:FREQ:SPAN " + span)

    devicename.write(":chpower:state on")
    devicename.write(":chpower:width " + chwidth)
    devicename.write(":chpower:count 1")


    devicename.write(":trace:select 1")
    devicename.write(":trace:display on")
    devicename.write(":trace:type write;")
    devicename.write(":trace:average:count 10")

    devicename.write(":trace:select 2")
    devicename.write(":trace:display on")
    devicename.write(":trace:type minhold;")
    devicename.write(":trace:average:count 10")

    devicename.write(":trace:select 3")
    devicename.write(":trace:display on")
    devicename.write(":trace:type maxhold;")
    devicename.write(":trace:average:count 10")

    devicename.write(":trace:select 6")
    devicename.write(":trace:display on")
    devicename.write(":trace:type average;")
    devicename.write(":trace:average:count 10")

    one_sweep(devicename)

    ###For testing purposes
    devicename.write(":chpower:chpower? 0")
    try:
        devicename.read_raw()
    except:
        raise ("Device couldn't read after initialization query.")


##############################
#          Constants         #
##############################
###freqlst from 2.4GHz to 3.6GHz every 1MHz
freqlst = [2500000000, 2501000000, 2502000000, 2503000000, 2504000000, 2505000000, 2506000000, 2507000000, 2508000000, 2509000000, 2510000000, 2511000000, 2512000000, 2513000000, 2514000000, 2515000000, 2516000000, 2517000000, 2518000000, 2519000000, 2520000000, 2521000000, 2522000000, 2523000000, 2524000000, 2525000000, 2526000000, 2527000000, 2528000000, 2529000000, 2530000000, 2531000000, 2532000000, 2533000000, 2534000000, 2535000000, 2536000000, 2537000000, 2538000000, 2539000000, 2540000000, 2541000000, 2542000000, 2543000000, 2544000000, 2545000000, 2546000000, 2547000000, 2548000000, 2549000000, 2550000000, 2551000000, 2552000000, 2553000000, 2554000000, 2555000000, 2556000000, 2557000000, 2558000000, 2559000000, 2560000000, 2561000000, 2562000000, 2563000000, 2564000000, 2565000000, 2566000000, 2567000000, 2568000000, 2569000000, 2570000000, 2571000000, 2572000000, 2573000000, 2574000000, 2575000000, 2576000000, 2577000000, 2578000000, 2579000000, 2580000000, 2581000000, 2582000000, 2583000000, 2584000000, 2585000000, 2586000000, 2587000000, 2588000000, 2589000000, 2590000000, 2591000000, 2592000000, 2593000000, 2594000000, 2595000000, 2596000000, 2597000000, 2598000000, 2599000000, 2600000000, 2601000000, 2602000000, 2603000000, 2604000000, 2605000000, 2606000000, 2607000000, 2608000000, 2609000000, 2610000000, 2611000000, 2612000000, 2613000000, 2614000000, 2615000000, 2616000000, 2617000000, 2618000000, 2619000000, 2620000000, 2621000000, 2622000000, 2623000000, 2624000000, 2625000000, 2626000000, 2627000000, 2628000000, 2629000000, 2630000000, 2631000000, 2632000000, 2633000000, 2634000000, 2635000000, 2636000000, 2637000000, 2638000000, 2639000000, 2640000000, 2641000000, 2642000000, 2643000000, 2644000000, 2645000000, 2646000000, 2647000000, 2648000000, 2649000000, 2650000000, 2651000000, 2652000000, 2653000000, 2654000000, 2655000000, 2656000000, 2657000000, 2658000000, 2659000000, 2660000000, 2661000000, 2662000000, 2663000000, 2664000000, 2665000000, 2666000000, 2667000000, 2668000000, 2669000000, 2670000000, 2671000000, 2672000000, 2673000000, 2674000000, 2675000000, 2676000000, 2677000000, 2678000000, 2679000000, 2680000000, 2681000000, 2682000000, 2683000000, 2684000000, 2685000000, 2686000000, 2687000000, 2688000000, 2689000000, 2690000000, 2691000000, 2692000000, 2693000000, 2694000000, 2695000000, 2696000000, 2697000000, 2698000000, 2699000000, 2700000000, 2701000000, 2702000000, 2703000000, 2704000000, 2705000000, 2706000000, 2707000000, 2708000000, 2709000000, 2710000000, 2711000000, 2712000000, 2713000000, 2714000000, 2715000000, 2716000000, 2717000000, 2718000000, 2719000000, 2720000000, 2721000000, 2722000000, 2723000000, 2724000000, 2725000000, 2726000000, 2727000000, 2728000000, 2729000000, 2730000000, 2731000000, 2732000000, 2733000000, 2734000000, 2735000000, 2736000000, 2737000000, 2738000000, 2739000000, 2740000000, 2741000000, 2742000000, 2743000000, 2744000000, 2745000000, 2746000000, 2747000000, 2748000000, 2749000000, 2750000000, 2751000000, 2752000000, 2753000000, 2754000000, 2755000000, 2756000000, 2757000000, 2758000000, 2759000000, 2760000000, 2761000000, 2762000000, 2763000000, 2764000000, 2765000000, 2766000000, 2767000000, 2768000000, 2769000000, 2770000000, 2771000000, 2772000000, 2773000000, 2774000000, 2775000000, 2776000000, 2777000000, 2778000000, 2779000000, 2780000000, 2781000000, 2782000000, 2783000000, 2784000000, 2785000000, 2786000000, 2787000000, 2788000000, 2789000000, 2790000000, 2791000000, 2792000000, 2793000000, 2794000000, 2795000000, 2796000000, 2797000000, 2798000000, 2799000000, 2800000000, 2801000000, 2802000000, 2803000000, 2804000000, 2805000000, 2806000000, 2807000000, 2808000000, 2809000000, 2810000000, 2811000000, 2812000000, 2813000000, 2814000000, 2815000000, 2816000000, 2817000000, 2818000000, 2819000000, 2820000000, 2821000000, 2822000000, 2823000000, 2824000000, 2825000000, 2826000000, 2827000000, 2828000000, 2829000000, 2830000000, 2831000000, 2832000000, 2833000000, 2834000000, 2835000000, 2836000000, 2837000000, 2838000000, 2839000000, 2840000000, 2841000000, 2842000000, 2843000000, 2844000000, 2845000000, 2846000000, 2847000000, 2848000000, 2849000000, 2850000000, 2851000000, 2852000000, 2853000000, 2854000000, 2855000000, 2856000000, 2857000000, 2858000000, 2859000000, 2860000000, 2861000000, 2862000000, 2863000000, 2864000000, 2865000000, 2866000000, 2867000000, 2868000000, 2869000000, 2870000000, 2871000000, 2872000000, 2873000000, 2874000000, 2875000000, 2876000000, 2877000000, 2878000000, 2879000000, 2880000000, 2881000000, 2882000000, 2883000000, 2884000000, 2885000000, 2886000000, 2887000000, 2888000000, 2889000000, 2890000000, 2891000000, 2892000000, 2893000000, 2894000000, 2895000000, 2896000000, 2897000000, 2898000000, 2899000000, 2900000000, 2901000000, 2902000000, 2903000000, 2904000000, 2905000000, 2906000000, 2907000000, 2908000000, 2909000000, 2910000000, 2911000000, 2912000000, 2913000000, 2914000000, 2915000000, 2916000000, 2917000000, 2918000000, 2919000000, 2920000000, 2921000000, 2922000000, 2923000000, 2924000000, 2925000000, 2926000000, 2927000000, 2928000000, 2929000000, 2930000000, 2931000000, 2932000000, 2933000000, 2934000000, 2935000000, 2936000000, 2937000000, 2938000000, 2939000000, 2940000000, 2941000000, 2942000000, 2943000000, 2944000000, 2945000000, 2946000000, 2947000000, 2948000000, 2949000000, 2950000000, 2951000000, 2952000000, 2953000000, 2954000000, 2955000000, 2956000000, 2957000000, 2958000000, 2959000000, 2960000000, 2961000000, 2962000000, 2963000000, 2964000000, 2965000000, 2966000000, 2967000000, 2968000000, 2969000000, 2970000000, 2971000000, 2972000000, 2973000000, 2974000000, 2975000000, 2976000000, 2977000000, 2978000000, 2979000000, 2980000000, 2981000000, 2982000000, 2983000000, 2984000000, 2985000000, 2986000000, 2987000000, 2988000000, 2989000000, 2990000000, 2991000000, 2992000000, 2993000000, 2994000000, 2995000000, 2996000000, 2997000000, 2998000000, 2999000000, 3000000000, 3001000000, 3002000000, 3003000000, 3004000000, 3005000000, 3006000000, 3007000000, 3008000000, 3009000000, 3010000000, 3011000000, 3012000000, 3013000000, 3014000000, 3015000000, 3016000000, 3017000000, 3018000000, 3019000000, 3020000000, 3021000000, 3022000000, 3023000000, 3024000000, 3025000000, 3026000000, 3027000000, 3028000000, 3029000000, 3030000000, 3031000000, 3032000000, 3033000000, 3034000000, 3035000000, 3036000000, 3037000000, 3038000000, 3039000000, 3040000000, 3041000000, 3042000000, 3043000000, 3044000000, 3045000000, 3046000000, 3047000000, 3048000000, 3049000000, 3050000000, 3051000000, 3052000000, 3053000000, 3054000000, 3055000000, 3056000000, 3057000000, 3058000000, 3059000000, 3060000000, 3061000000, 3062000000, 3063000000, 3064000000, 3065000000, 3066000000, 3067000000, 3068000000, 3069000000, 3070000000, 3071000000, 3072000000, 3073000000, 3074000000, 3075000000, 3076000000, 3077000000, 3078000000, 3079000000, 3080000000, 3081000000, 3082000000, 3083000000, 3084000000, 3085000000, 3086000000, 3087000000, 3088000000, 3089000000, 3090000000, 3091000000, 3092000000, 3093000000, 3094000000, 3095000000, 3096000000, 3097000000, 3098000000, 3099000000, 3100000000, 3101000000, 3102000000, 3103000000, 3104000000, 3105000000, 3106000000, 3107000000, 3108000000, 3109000000, 3110000000, 3111000000, 3112000000, 3113000000, 3114000000, 3115000000, 3116000000, 3117000000, 3118000000, 3119000000, 3120000000, 3121000000, 3122000000, 3123000000, 3124000000, 3125000000, 3126000000, 3127000000, 3128000000, 3129000000, 3130000000, 3131000000, 3132000000, 3133000000, 3134000000, 3135000000, 3136000000, 3137000000, 3138000000, 3139000000, 3140000000, 3141000000, 3142000000, 3143000000, 3144000000, 3145000000, 3146000000, 3147000000, 3148000000, 3149000000, 3150000000, 3151000000, 3152000000, 3153000000, 3154000000, 3155000000, 3156000000, 3157000000, 3158000000, 3159000000, 3160000000, 3161000000, 3162000000, 3163000000, 3164000000, 3165000000, 3166000000, 3167000000, 3168000000, 3169000000, 3170000000, 3171000000, 3172000000, 3173000000, 3174000000, 3175000000, 3176000000, 3177000000, 3178000000, 3179000000, 3180000000, 3181000000, 3182000000, 3183000000, 3184000000, 3185000000, 3186000000, 3187000000, 3188000000, 3189000000, 3190000000, 3191000000, 3192000000, 3193000000, 3194000000, 3195000000, 3196000000, 3197000000, 3198000000, 3199000000, 3200000000, 3201000000, 3202000000, 3203000000, 3204000000, 3205000000, 3206000000, 3207000000, 3208000000, 3209000000, 3210000000, 3211000000, 3212000000, 3213000000, 3214000000, 3215000000, 3216000000, 3217000000, 3218000000, 3219000000, 3220000000, 3221000000, 3222000000, 3223000000, 3224000000, 3225000000, 3226000000, 3227000000, 3228000000, 3229000000, 3230000000, 3231000000, 3232000000, 3233000000, 3234000000, 3235000000, 3236000000, 3237000000, 3238000000, 3239000000, 3240000000, 3241000000, 3242000000, 3243000000, 3244000000, 3245000000, 3246000000, 3247000000, 3248000000, 3249000000, 3250000000, 3251000000, 3252000000, 3253000000, 3254000000, 3255000000, 3256000000, 3257000000, 3258000000, 3259000000, 3260000000, 3261000000, 3262000000, 3263000000, 3264000000, 3265000000, 3266000000, 3267000000, 3268000000, 3269000000, 3270000000, 3271000000, 3272000000, 3273000000, 3274000000, 3275000000, 3276000000, 3277000000, 3278000000, 3279000000, 3280000000, 3281000000, 3282000000, 3283000000, 3284000000, 3285000000, 3286000000, 3287000000, 3288000000, 3289000000, 3290000000, 3291000000, 3292000000, 3293000000, 3294000000, 3295000000, 3296000000, 3297000000, 3298000000, 3299000000, 3300000000, 3301000000, 3302000000, 3303000000, 3304000000, 3305000000, 3306000000, 3307000000, 3308000000, 3309000000, 3310000000, 3311000000, 3312000000, 3313000000, 3314000000, 3315000000, 3316000000, 3317000000, 3318000000, 3319000000, 3320000000, 3321000000, 3322000000, 3323000000, 3324000000, 3325000000, 3326000000, 3327000000, 3328000000, 3329000000, 3330000000, 3331000000, 3332000000, 3333000000, 3334000000, 3335000000, 3336000000, 3337000000, 3338000000, 3339000000, 3340000000, 3341000000, 3342000000, 3343000000, 3344000000, 3345000000, 3346000000, 3347000000, 3348000000, 3349000000, 3350000000, 3351000000, 3352000000, 3353000000, 3354000000, 3355000000, 3356000000, 3357000000, 3358000000, 3359000000, 3360000000, 3361000000, 3362000000, 3363000000, 3364000000, 3365000000, 3366000000, 3367000000, 3368000000, 3369000000, 3370000000, 3371000000, 3372000000, 3373000000, 3374000000, 3375000000, 3376000000, 3377000000, 3378000000, 3379000000, 3380000000, 3381000000, 3382000000, 3383000000, 3384000000, 3385000000, 3386000000, 3387000000, 3388000000, 3389000000, 3390000000, 3391000000, 3392000000, 3393000000, 3394000000, 3395000000, 3396000000, 3397000000, 3398000000, 3399000000, 3400000000, 3401000000, 3402000000, 3403000000, 3404000000, 3405000000, 3406000000, 3407000000, 3408000000, 3409000000, 3410000000, 3411000000, 3412000000, 3413000000, 3414000000, 3415000000, 3416000000, 3417000000, 3418000000, 3419000000, 3420000000, 3421000000, 3422000000, 3423000000, 3424000000, 3425000000, 3426000000, 3427000000, 3428000000, 3429000000, 3430000000, 3431000000, 3432000000, 3433000000, 3434000000, 3435000000, 3436000000, 3437000000, 3438000000, 3439000000, 3440000000, 3441000000, 3442000000, 3443000000, 3444000000, 3445000000, 3446000000, 3447000000, 3448000000, 3449000000, 3450000000, 3451000000, 3452000000, 3453000000, 3454000000, 3455000000, 3456000000, 3457000000, 3458000000, 3459000000, 3460000000, 3461000000, 3462000000, 3463000000, 3464000000, 3465000000, 3466000000, 3467000000, 3468000000, 3469000000, 3470000000, 3471000000, 3472000000, 3473000000, 3474000000, 3475000000, 3476000000, 3477000000, 3478000000, 3479000000, 3480000000, 3481000000, 3482000000, 3483000000, 3484000000, 3485000000, 3486000000, 3487000000, 3488000000, 3489000000, 3490000000, 3491000000, 3492000000, 3493000000, 3494000000, 3495000000, 3496000000, 3497000000, 3498000000, 3499000000, 3500000000, 3501000000, 3502000000, 3503000000, 3504000000, 3505000000, 3506000000, 3507000000, 3508000000, 3509000000, 3510000000, 3511000000, 3512000000, 3513000000, 3514000000, 3515000000, 3516000000, 3517000000, 3518000000, 3519000000, 3520000000, 3521000000, 3522000000, 3523000000, 3524000000, 3525000000, 3526000000, 3527000000, 3528000000, 3529000000, 3530000000, 3531000000, 3532000000, 3533000000, 3534000000, 3535000000, 3536000000, 3537000000, 3538000000, 3539000000, 3540000000, 3541000000, 3542000000, 3543000000, 3544000000, 3545000000, 3546000000, 3547000000, 3548000000, 3549000000, 3550000000, 3551000000, 3552000000, 3553000000, 3554000000, 3555000000, 3556000000, 3557000000, 3558000000, 3559000000, 3560000000, 3561000000, 3562000000, 3563000000, 3564000000, 3565000000, 3566000000, 3567000000, 3568000000, 3569000000, 3570000000, 3571000000, 3572000000, 3573000000, 3574000000, 3575000000, 3576000000, 3577000000, 3578000000, 3579000000, 3580000000, 3581000000, 3582000000, 3583000000, 3584000000, 3585000000, 3586000000, 3587000000, 3588000000, 3589000000, 3590000000, 3591000000, 3592000000, 3593000000, 3594000000, 3595000000, 3596000000, 3597000000, 3598000000, 3599000000, 3600000000]
freqlst2 = [2500000000, 2501000000, 2502000000, 2503000000, 2504000000, 2505000000, 2506000000, 2507000000, 2508000000, 2509000000, 2510000000, 2511000000, 2512000000, 2513000000, 2514000000, 2515000000, 2516000000, 2517000000]
ratelst = [5000000, 10000000, 20000000]
antlst = ['A', 'B', 'AB']
TSP_TSG_CONST_lst = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]
PAD_lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]
PAD_lst2 = [20, 22, 24, 26, 28, 30]
IAMP_lst = [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
PA1_lst = [0, 31]
PA2_lst = [0, 14]
PA3_lst = [0, 13.7]



