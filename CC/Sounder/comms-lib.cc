/*

 Generate training sequence for pilots and preambles.

 Supports:
 STS - 802.11 Short training sequence. Generates one symbol, 16 complex I/Q samples.
 LTS - 802.11 Long training sequence. Generates 2.5 symbols, cp length of 32 samples, 
       for a total of 160 complex I/Q samples.
 LTE Zadoff Chu - Generates the 25th root length-63 Zadoff-Chu sequence.
       Total of 63-long complex IQ samples.
 Gold IFFT - Total of 128-long complex IQ samples including a 32-sample cyclic prefix
 Hadamard - Real valued sequence. Possible lenghts: {2, 4, 8, 16, 32, 64}

---------------------------------------------------------------------
 Copyright (c) 2018-2019, Rice University 
 RENEW OPEN SOURCE LICENSE: http://renew-wireless.org/license
 Author(s): Oscar Bejarano: obejarano@rice.edu
            Rahman Doost-Mohamamdy: doost@rice.edu
---------------------------------------------------------------------
*/


#include "include/comms-lib.h"

std::vector<int> CommsLib::getDataSc(int fftSize)
{
    std::vector<int> data_sc;
    if (fftSize == 64)
    {
       int sc_ind[48] = {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                         22, 23, 24, 25, 26, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 
                         51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63};
       data_sc.assign(sc_ind, sc_ind+48);
    }
    return data_sc; 
}

std::vector<int> CommsLib::getNullSc(int fftSize)
{
    std::vector<int> null_sc;
    if (fftSize == 64)
    {
       int null[12] = {0, 1, 2, 3, 4 , 5, 32, 59, 60, 61, 62, 63};
       null_sc.assign(null, null+12);
    }
    return null_sc; 
}

std::vector<std::vector<int>> CommsLib::getPilotSc(int fftSize)
{
    std::vector<std::vector<int>> pilot_sc;
    pilot_sc.resize(2);
    if (fftSize == 64)
    {
       int sc_ind[4] = {7, 21, 43, 57};
       int sc_val[4] = {1, 1, -1, 1};
       pilot_sc[0].assign(sc_ind, sc_ind+4); 
       pilot_sc[1].assign(sc_val, sc_val+4);
    }
    return pilot_sc; 
}

std::vector<std::complex<float>> CommsLib::IFFT(std::vector<std::complex<float>> in, int fftsize)
{
    std::vector<std::complex<float>> out(in.size());

    void * fft_in = mufft_alloc(fftsize * sizeof(std::complex<float>));
    void * fft_out = mufft_alloc(fftsize * sizeof(std::complex<float>));
    mufft_plan_1d *mufftplan = mufft_create_plan_1d_c2c(fftsize, MUFFT_INVERSE, MUFFT_FLAG_CPU_ANY);

    memcpy(fft_in, in.data(), fftsize * sizeof(std::complex<float>));
    mufft_execute_plan_1d(mufftplan, fft_out, fft_in);
    memcpy(out.data(), fft_out, fftsize * sizeof(std::complex<float>));
    for (int i = 0; i < fftsize; i++) out[i] /= fftsize;

    mufft_free_plan_1d(mufftplan);
    mufft_free(fft_in);
    mufft_free(fft_out);
    return out;
}

std::vector<std::complex<float>> CommsLib::FFT(std::vector<std::complex<float>> in, int fftsize)
{
    std::vector<std::complex<float>> out(in.size());

    void * fft_in = mufft_alloc(fftsize * sizeof(std::complex<float>));
    void * fft_out = mufft_alloc(fftsize * sizeof(std::complex<float>));
    mufft_plan_1d *mufftplan = mufft_create_plan_1d_c2c(fftsize, MUFFT_FORWARD, MUFFT_FLAG_CPU_ANY);

    memcpy(fft_in, in.data(), fftsize * sizeof(std::complex<float>));
    mufft_execute_plan_1d(mufftplan, fft_out, fft_in);
    memcpy(out.data(), fft_out, fftsize * sizeof(std::complex<float>));

    mufft_free_plan_1d(mufftplan);
    mufft_free(fft_in);
    mufft_free(fft_out);
    return out;
}

std::vector<std::complex<float>> CommsLib::modulate(std::vector<int> in, int type)
{
    std::vector<std::complex<float>> out(in.size());
    if (type == QPSK)
    {
        float qpsk_table[2][4]; // = init_qpsk();
        float scale = 1/sqrt(2);
        float mod_qpsk[2] = {-scale, scale};
        for (int i = 0; i < 4; i++) {
            qpsk_table[0][i] = mod_qpsk[i / 2];
            qpsk_table[1][i] = mod_qpsk[i % 2];
        }
        for (int i = 0; i < in.size(); i++)
        {
            if (in[i] >= 0 and in[i] < 4) out[i] = std::complex<float>(qpsk_table[0][in[i]], qpsk_table[1][in[i]]);
            else 
            {
                std::cout << "Error: No compatible input vector!" << std::endl; 
                break;
            }
        }
    }
    else if (type == QAM16)
    {
        float qam16_table[2][16]; //= init_qam16();
        float scale = 1/sqrt(10);
        float mod_16qam[4] = {-3*scale, -1*scale, 3*scale, scale};
        for (int i = 0; i < 16; i++) {
            qam16_table[0][i] = mod_16qam[i / 4];
            qam16_table[1][i] = mod_16qam[i % 4];
        }
        for (int i = 0; i < in.size(); i++)
        {
            if (in[i] >= 0 and in[i] < 16) out[i] = std::complex<float>(qam16_table[0][in[i]], qam16_table[1][in[i]]);
            else 
            {
                std::cout << "Error: No compatible input vector!" << std::endl; 
                break;
            }
        }
    }
    else if (type == QAM64)
    {
        float qam64_table[2][64]; // = init_qam64();
        float scale = 1/sqrt(42);
        float mod_64qam[8] = {-7*scale, -5*scale, -3*scale, -1*scale, scale, 3*scale, 5*scale, 7*scale};
        for (int i = 0; i < 64; i++) {
            qam64_table[0][i] = mod_64qam[i / 8];
            qam64_table[1][i] = mod_64qam[i % 8];
        }
        for (int i = 0; i < in.size(); i++) 
        {
            if (in[i] >= 0 and in[i] < 64) out[i] = std::complex<float>(qam64_table[0][in[i]], qam64_table[1][in[i]]);
            else 
            {
                std::cout << "Error: No compatible input vector!" << std::endl; 
                break;
            }
        }
    }
    else
    {
        // Not Supported
        std::cout << "Modulation Type " << type << " not supported!" << std::endl;  
    }
    return out;
}


std::vector<std::vector<double> > CommsLib::getSequence(int N, int type)
{
    std::vector<std::vector<double>> matrix;

    if(type == STS_SEQ){
	// STS - 802.11 Short training sequence (one symbol)
        matrix.resize(2);

        double sts_re[16]={0.04599876, -0.13244371, -0.01347272, 0.1427553, 0.09199751, 
				     0.1427553, -0.01347272, -0.13244371, 0.04599876, 0.00233959,
				    -0.07852478, -0.01265117, 0, -0.01265117, -0.07852478, 0.00233959};

        double sts_im[16]={0.04599876, 0.00233959, -0.07852478, -0.01265117, 0.0,
				      -0.01265117, -0.07852478, 0.00233959, 0.04599876, -0.13244371,
				      -0.01347272, 0.1427553, 0.09199751, 0.1427553, -0.01347272, -0.13244371};

        for (int j = 0; j < 2; j++){
	    std::vector<double> a;
            for (int i = 0; i < 16; i++){
		if(j == 0){
	            a.push_back(sts_re[i]);
		}
		else{
	            a.push_back(sts_im[i]);
		}
            }
	    matrix[j] = a;
        }
    }
    else if(type == LTS_SEQ){
	// LTS - 802.11 Long training sequence (2.5 symbols, cp length of 32 samples)
        matrix.resize(2);
 
	double lts_re[160]={-0.15625, 0.012284590458567165, 0.09171654912240956, -0.09188755526278, -0.002805944173488664, 
			   0.07507369706822604, -0.12732435990770957, -0.12188700906074086, -0.03504126073623884, -0.056455128448539, 
			  -0.060310100316213804, 0.06955684740689412, 0.08221832230305733, -0.1312626089753594, -0.05720634587149917, 
			   0.03691794200106715, 0.0625, 0.1192390885103326, -0.022483206307774027, 0.05866876712873733, 
			   0.0244758515211019, -0.13680487681585982, 0.0009889797089880949, 0.05333773437415131, 0.09754126073623881, 
 			  -0.03831596747441851, -0.11513121478170157, 0.05982384485901423, 0.021111770349329442, 0.09683188459112747, 
			   0.0397496983535005, -0.005121250360419827, 0.15625, -0.005121250360419823, 0.0397496983535005, 
			   0.09683188459112749, 0.02111177034932945, 0.05982384485901426, -0.11513121478170157, -0.0383159674744185, 
			   0.09754126073623884, 0.05333773437415131, 0.0009889797089880983, -0.1368048768158598, 0.024475851521101908, 
			   0.05866876712873735, -0.02248320630777403, 0.1192390885103326, 0.0625, 0.03691794200106713, 
			  -0.05720634587149916, -0.1312626089753594, 0.08221832230305731, 0.06955684740689413, -0.0603101003162138, 
			  -0.05645512844853901, -0.03504126073623881, -0.12188700906074088, -0.12732435990770957, 0.07507369706822604, 
			  -0.002805944173488671, -0.09188755526278002, 0.09171654912240956, 0.01228459045856714, -0.15625, 
			   0.012284590458567165, 0.09171654912240956, -0.09188755526278, -0.002805944173488664, 0.07507369706822604, 
			  -0.12732435990770957, -0.12188700906074086, -0.03504126073623884, -0.056455128448539, -0.060310100316213804, 
			   0.06955684740689412, 0.08221832230305733, -0.1312626089753594, -0.05720634587149917, 0.03691794200106715, 
			   0.0625, 0.1192390885103326, -0.022483206307774027, 0.05866876712873733, 0.0244758515211019, 
			  -0.13680487681585982, 0.0009889797089880949, 0.05333773437415131, 0.09754126073623881, -0.03831596747441851, 
			  -0.11513121478170157, 0.05982384485901423, 0.021111770349329442, 0.09683188459112747, 0.0397496983535005, 
			  -0.005121250360419827, 0.15625, -0.005121250360419823, 0.0397496983535005, 0.09683188459112749, 
			   0.02111177034932945, 0.05982384485901426, -0.11513121478170157, -0.0383159674744185, 0.09754126073623884, 
			   0.05333773437415131, 0.0009889797089880983, -0.1368048768158598, 0.024475851521101908, 0.05866876712873735, 
			  -0.02248320630777403, 0.1192390885103326, 0.0625, 0.03691794200106713, -0.05720634587149916, 
			  -0.1312626089753594, 0.08221832230305731, 0.06955684740689413, -0.0603101003162138, -0.05645512844853901, 
			  -0.03504126073623881, -0.12188700906074088, -0.12732435990770957, 0.07507369706822604, -0.002805944173488671, 
			  -0.09188755526278002, 0.09171654912240956, 0.01228459045856714, -0.15625, 0.012284590458567165, 
			   0.09171654912240956, -0.09188755526278, -0.002805944173488664, 0.07507369706822604, -0.12732435990770957, 
			  -0.12188700906074086, -0.03504126073623884, -0.056455128448539, -0.060310100316213804, 0.06955684740689412, 
			   0.08221832230305733, -0.1312626089753594, -0.05720634587149917, 0.03691794200106715, 0.0625, 
			   0.1192390885103326, -0.022483206307774027, 0.05866876712873733, 0.0244758515211019, -0.13680487681585982, 
			   0.0009889797089880949, 0.05333773437415131, 0.09754126073623881, -0.03831596747441851, -0.11513121478170157, 
			   0.05982384485901423, 0.021111770349329442, 0.09683188459112747, 0.0397496983535005, -0.005121250360419827};

	double lts_im[160]={0.0, -0.09759955359207202, -0.10587165981863113, -0.11512870891096853, -0.053774266476545984, 
			   0.07404041892509948, 0.020501379986300285, 0.01656621813913718, 0.15088834764831843, 0.021803920607437133, 
			  -0.08128612411572139, -0.014121958590578302, -0.09235655195372787, -0.06522722901814465, -0.039298588174111096, 
			  -0.0983441502870872, 0.0625, 0.004095594414801514, -0.1606573329526341, 0.01493899945069943, 
			   0.05853179569459056, 0.04737981136568012, 0.11500464362403023, -0.0040763264805083466, 0.025888347648318433, 
			   0.10617091261510256, 0.05518049537437035, 0.08770675983572167, -0.027885918828227545, -0.08279790948776067, 
			   0.11115794305116433, 0.12032513267372755, 0.0, -0.1203251326737275, -0.11115794305116432, 
			   0.08279790948776065, 0.027885918828227538, -0.0877067598357217, -0.05518049537437036, -0.10617091261510254, 
			  -0.025888347648318433, 0.00407632648050834, -0.11500464362403023, -0.04737981136568013, -0.05853179569459056, 
			  -0.014938999450699438, 0.16065733295263412, -0.0040955944148015275, -0.0625, 0.09834415028708718, 
			   0.0392985881741111, 0.06522722901814465, 0.09235655195372787, 0.014121958590578316, 0.08128612411572139, 
			  -0.021803920607437126, -0.15088834764831843, -0.01656621813913719, -0.02050137998630029, -0.07404041892509945, 
			   0.05377426647654598, 0.11512870891096855, 0.10587165981863114, 0.09759955359207204, 0.0, 
			  -0.09759955359207202, -0.10587165981863113, -0.11512870891096853, -0.053774266476545984, 0.07404041892509948, 
			   0.020501379986300285, 0.01656621813913718, 0.15088834764831843, 0.021803920607437133, -0.08128612411572139, 
			  -0.014121958590578302, -0.09235655195372787, -0.06522722901814465, -0.039298588174111096, -0.0983441502870872, 
			   0.0625, 0.004095594414801514, -0.1606573329526341, 0.01493899945069943, 0.05853179569459056, 
			   0.04737981136568012, 0.11500464362403023, -0.0040763264805083466, 0.025888347648318433, 0.10617091261510256, 
			   0.05518049537437035, 0.08770675983572167, -0.027885918828227545, -0.08279790948776067, 0.11115794305116433, 
			   0.12032513267372755, 0.0, -0.1203251326737275, -0.11115794305116432, 0.08279790948776065, 
			   0.027885918828227538, -0.0877067598357217, -0.05518049537437036, -0.10617091261510254, -0.025888347648318433, 
			   0.00407632648050834, -0.11500464362403023, -0.04737981136568013, -0.05853179569459056, -0.014938999450699438, 
			   0.16065733295263412, -0.0040955944148015275, -0.0625, 0.09834415028708718, 0.0392985881741111, 
			   0.06522722901814465, 0.09235655195372787, 0.014121958590578316, 0.08128612411572139, -0.021803920607437126, 
			  -0.15088834764831843, -0.01656621813913719, -0.02050137998630029, -0.07404041892509945, 0.05377426647654598, 
			   0.11512870891096855, 0.10587165981863114, 0.09759955359207204, 0.0, -0.09759955359207202, 
			  -0.10587165981863113, -0.11512870891096853, -0.053774266476545984, 0.07404041892509948, 0.020501379986300285, 
			   0.01656621813913718, 0.15088834764831843, 0.021803920607437133, -0.08128612411572139, -0.014121958590578302, 
			  -0.09235655195372787, -0.06522722901814465, -0.039298588174111096, -0.0983441502870872, 0.0625, 
			   0.004095594414801514, -0.1606573329526341, 0.01493899945069943, 0.05853179569459056, 0.04737981136568012, 
			   0.11500464362403023, -0.0040763264805083466, 0.025888347648318433, 0.10617091261510256, 0.05518049537437035, 
			   0.08770675983572167, -0.027885918828227545, -0.08279790948776067, 0.11115794305116433, 0.12032513267372755};

        for (int j = 0; j < 2; j++){
	    std::vector<double> a;
            for (int i = 0; i < 160; i++){
		if(j == 0){
	            a.push_back(lts_re[i]);
		}
		else{
	            a.push_back(lts_im[i]);
		}
            }
	    matrix[j] = a;
        }
    }
    else if(type == LTE_ZADOFF_CHU){
	// LTE Zadoff Chu Sequence: Generate the 25th root length-63 Zadoff-Chu sequence
        matrix.resize(2);
 
	double lts_re[63]={1.0, -0.7971325072229225, 0.3653410243663958, -0.7330518718298251, 0.9801724878485435, 
			   0.955572805786141, -0.49999999999999617, 0.7660444431189757, -0.222520933956311, 0.6234898018587135, 
			   0.4562106573531701, 0.3653410243663966, 0.9555728057861371, 0.7660444431189751, -0.49999999999995753, 
			  -0.7330518718298601, 0.9801724878485425, -0.22252093395630812, 0.6234898018586816, -0.7971325072229237, 
			  -0.5000000000000849, -0.5000000000000051, -0.7971325072228729, -0.9888308262251311, 0.9555728057861521, 
			   0.9801724878485374, -0.22252093395631578, 1.0, 0.7660444431189537, -0.7330518718300307, 
			  -0.9888308262251518, 0.4562106573531763, -0.9888308262251305, -0.733051871829836, 0.76604444311897, 
			   1.0, -0.22252093395601577, 0.9801724878485049, 0.9555728057861584, -0.988830826225147, 
			  -0.797132507222964, -0.4999999999997504, -0.4999999999996758, -0.7971325072227249, 0.6234898018583583, 
			  -0.2225209339562393, 0.9801724878485397, -0.7330518718300426, -0.5000000000003123, 0.7660444431190734, 
			   0.9555728057861007, 0.3653410243666958, 0.4562106573529356, 0.6234898018587859, -0.22252093395649927, 
			   0.7660444431189057, -0.5000000000002512, 0.9555728057860857, 0.9801724878483727, -0.7330518718292615, 
			   0.3653410243664768, -0.797132507222648, 1.0};

	double lts_im[63]={0.0, -0.6038044103254774, -0.9308737486442039, -0.6801727377709207, 0.1981461431993993, 
			   0.2947551744109033, -0.8660254037844408, -0.642787609686542, -0.9749279121818244, 0.7818314824680458, 
			   0.8898718088114649, -0.9308737486442037, 0.294755174410916, -0.6427876096865428, 0.8660254037844631, 
			   0.680172737770883, 0.19814614319940435, 0.9749279121818251, 0.7818314824680712, -0.6038044103254757, 
			  -0.8660254037843896, 0.8660254037844357, -0.6038044103255429, 0.1490422661761573, -0.2947551744108673, 
			   0.19814614319942933, -0.9749279121818233, -6.273657903199343e-14, -0.6427876096865683, 0.6801727377706992, 
			   0.14904226617601968, 0.8898718088114618, 0.14904226617616118, 0.6801727377709089, -0.6427876096865488, 
			  -6.666535247945037e-14, -0.9749279121818918, 0.1981461431995907, -0.2947551744108467, 0.14904226617605265, 
			  -0.6038044103254225, 0.8660254037845827, -0.8660254037846258, -0.6038044103257382, 0.781831482468329, 
			   0.9749279121818407, 0.19814614319941776, 0.6801727377706862, 0.8660254037842583, -0.6427876096864258, 
			   0.29475517441103394, -0.9308737486440862, 0.8898718088115852, 0.7818314824679881, -0.9749279121817814, 
			  -0.6427876096866254, -0.8660254037842936, 0.2947551744110826, 0.19814614320024387, -0.6801727377715282, 
			  -0.9308737486441722, -0.6038044103258398, 1.021155254707157e-12};

        for (int j = 0; j < 2; j++){
	    std::vector<double> a;
            for (int i = 0; i < 63; i++){
		if(j == 0){
	            a.push_back(lts_re[i]);
		}
		else{
	            a.push_back(lts_im[i]);
		}
            }
	    matrix[j] = a;
        }
    }
    else if(type == GOLD_IFFT){
	// Gold IFFT Sequence - seq_length=128, cp=32, upsample=1
        matrix.resize(2);
	
	double lts_re[128]={-0.18821196258068085, -0.6143718361854553, -0.3217388987541199, -0.17571230232715607, 0.1019253060221672, 
			    -0.16832736134529114, 0.09985135495662689, 0.09971670806407928, 0.2315312772989273, 0.622130811214447, 
			    -0.03249127417802811, 0.22741436958312988, -0.2922542989253998, 0.35339444875717163, 0.22482731938362122, 
			    -0.032098956406116486, -0.03169742971658707, -0.15727071464061737, 0.2195173054933548, -0.031324971467256546, 
			    -0.4070085883140564, -0.1558319330215454, -0.03107009083032608, -0.40352097153663635, -0.15507081151008606, 
			     0.09289861470460892, 0.09289445728063583, -0.2782835066318512, -0.030868353322148323, -0.5235830545425415, 
			    -0.2771123945713043, -0.27667707204818726, -0.030734950676560402, -0.1533907800912857, 0.33664801716804504, 
			     0.09162385761737823, -0.2744279205799103, 0.09134794026613235, 0.09121976792812347, -0.030287278816103935, 
			    -0.9958324432373047, -0.2694506347179413, 0.3277457058429718, -0.029699334874749184, 0.08885830640792847, 
			     0.6794873476028442, -0.3833772540092468, -0.5004506707191467, -0.4998091161251068, -0.26438841223716736, 
			     0.673606812953949, -0.02926444262266159, 0.20410582423210144, -0.029138725250959396, -0.029079662635922432, 
			     0.3196908235549927, 0.20245471596717834, 0.08637407422065735, -0.4889540374279022, -0.25843098759651184, 
			    -0.02849179320037365, -0.48421189188957214, 0.31222769618034363, -0.141880601644516, 0.7658901214599609, 
			    -0.14168106019496918, -0.25496599078178406, 0.08443436026573181, -0.3656746745109558, -0.5902238488197327, 
			     0.5334668159484863, 0.6449553370475769, 0.19539372622966766, -0.1390155851840973, 0.416297048330307, 
			     0.08318868279457092, 0.30462709069252014, 0.19356386363506317, 0.0829218402504921, -0.0275914017111063, 
			    -0.9103109240531921, 0.08267105370759964, 0.1926754117012024, -0.027510428801178932, -0.35694053769111633, 
			    -0.027437394484877586, -0.13706500828266144, -0.027277426794171333, -0.13636301457881927, -0.13633954524993896, 
			    -0.027012871578335762, 0.401980996131897, -0.24117739498615265, 0.508926510810852, 0.0802842453122139, 
			     0.2938951551914215, -0.13317307829856873, 0.6112443804740906, 0.7126734256744385, 0.07894544303417206, 
			     0.49785399436950684, 0.18237946927547455, -0.12827201187610626, -0.0255367923527956, -0.12768080830574036, 
			     0.1777614802122116, 0.38090911507606506, 0.37947574257850647, 0.2781422734260559, 0.4753611087799072, 
			    -0.5237222909927368, 0.2716318666934967, 0.17278960347175598, -0.12278127670288086, 0.07351191341876984, 
			     0.1693081557750702, -0.12050632387399673, -0.1202714666724205, -0.21635565161705017, -0.11951464414596558, 
			    -0.30769577622413635, -0.023547815158963203, -0.117111936211586, 0.3482332229614258, -0.38774457573890686, 
			    -0.11089169979095459, -0.10100908577442169, -0.3248670697212219};

	double lts_im[128]={0.7904902100563049, -0.252976655960083, 0.46473392844200134, 0.7379916906356812, 0.16987550258636475, 
			   -0.23565830290317535, 0.0332837849855423, -0.49858349561691284, -0.36383485794067383, 0.032743729650974274, 
			    0.29242148995399475, -0.22741436958312988, 0.16236348450183868, -0.0963803082704544, 0.032118190079927444, 
			   -0.09629687666893005, -0.0950922891497612, 0.15727071464061737, 0.2822365462779999, 0.2819247245788574, 
			   -0.7200921177864075, -0.34283024072647095, 0.40391117334365845, 0.27936065196990967, 0.7753540873527527, 
			   -0.5883579254150391, -0.3406130373477936, -0.3401242792606354, -0.2160784751176834, -0.33878904581069946, 
			    0.030790267512202263, 0.030741896480321884, -0.09220485389232635, -0.4601723253726959, 0.39785677194595337, 
			    0.7635321617126465, 0.15245994925498962, -0.33494243025779724, -0.3344724774360657, 0.999480128288269, 
			   -0.09053021669387817, 0.0299389585852623, -0.20856547355651855, -0.20789533853530884, 0.1480971872806549, 
			    0.6204015016555786, -0.0884716808795929, 0.1471913754940033, -0.323405921459198, -0.2056354433298111, 
			   -0.5564577579498291, 0.02926444262266159, -0.20410582423210144, 0.728468120098114, -0.3198762834072113, 
			    0.029062800109386444, -0.780896782875061, 0.25912225246429443, 0.028762003406882286, -0.3158601224422455, 
			    0.1424589604139328, -0.08544915914535522, 0.028384337201714516, -0.1986328363418579, 0.14183150231838226, 
			   -0.4250431954860687, 0.14164777100086212, -0.08443436026573181, 0.25315937399864197, -0.1967412680387497, 
			    0.028077200055122375, 0.2523738443851471, -0.19539372622966766, -0.19462181627750397, -0.19427195191383362, 
			    0.3604843020439148, 0.36001381278038025, 0.24886780977249146, 0.13820306956768036, 0.0275914017111063, 
			   -0.4137776792049408, 0.4684692919254303, -0.08257517963647842, 0.35763558745384216, 0.5765962600708008, 
			   -0.19206176698207855, 0.46602103114128113, 0.4637162387371063, 0.13636301457881927, 0.13633954524993896, 
			    0.13506436347961426, -0.401980996131897, 0.24117739498615265, -0.08035682141780853, 0.026761416345834732, 
			   -0.40076616406440735, -0.39951926469802856, -0.07972752302885056, -0.07918594032526016, 0.3420969247817993, 
			    0.13101421296596527, -0.18237946927547455, 0.23088963329792023, -0.07661037147045135, 0.2298254370689392, 
			   -0.4824954569339752, 0.12696970999240875, -0.4806692898273468, -0.2781422734260559, 0.2251710593700409, 
			    0.02493915520608425, -0.0740814208984375, -0.17278960347175598, 0.22100628912448883, -0.26954370737075806, 
			    0.2176819145679474, -0.4579240381717682, 0.02405429445207119, 0.21635565161705017, 0.023902928456664085, 
			    0.4970470070838928, -0.07064344733953476, -0.25764626264572144, -0.06964664906263351, -0.34212756156921387, 
			   -0.24396173655986786, 0.18181636929512024, -0.057329483330249786};

        for (int j = 0; j < 2; j++){
	    std::vector<double> a;
            for (int i = 0; i < 128; i++){
		if(j == 0){
	            a.push_back(lts_re[i]);
		}
		else{
	            a.push_back(lts_im[i]);
		}
            }
	    matrix[j] = a;
        }
    }
    else if(type == HADAMARD){
	    // Hadamard
	    if (N==2){
		matrix.resize(2);
		int had[2][2]={{ 1, 1,},
			       	{ 1, -1}};

		for (int i = 0; i < 2; i++){           
		    std::vector<double> a;
		    for (int j = 0; j < 2; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
	    if (N==4){
		matrix.resize(4);
		int had[4][4]={{ 1, 1, 1, 1},
				{ 1, -1, 1, -1},
				{ 1, 1, -1, -1},
				{ 1, -1, -1, 1}};
		for (int i = 0; i < 4; i++){
		    std::vector<double> a;
		    for (int j = 0; j < 4; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
	    if (N==8){
		matrix.resize(8);
		int had[8][8]={{ 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1}};
		for (int i = 0; i < 8; i++){
		    std::vector<double> a;
		    for (int j = 0; j < 8; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
	    else if (N==16){
		matrix.resize(16);
		int had[16][16]={{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1}};

		for (int i = 0; i < 16; i++){
		    std::vector<double> a;
		    for (int j = 0; j < 16; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
	    else if (N==32){
		matrix.resize(32);
		int had[32][32]={{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1}};
		for (int i = 0; i < 32; i++){
		    std::vector<double> a;
		    for (int j = 0; j < 32; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
	    else if (N==64){
		matrix.resize(64);
		int had[64][64]={{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1},
				{ 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1},
				{ 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1},
				{ 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1},
				{ 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1},
				{ 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, -1, 1, 1, -1, 1, -1},
				{ 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1},
				{ 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, -1, -1, 1}};
		for (int i = 0; i < 64; i++){
		    std::vector<double> a;
		    for (int j = 0; j < 64; j++){
			a.push_back((double)had[i][j]);
		    }
		    matrix[i] = a;
		}
	    }
    }
#if DEBUG_PRINT
    std::cout << "Num elements in first vector: \t " << matrix[0].size() 
	      << "   Number of rows: " << matrix.size() << std::endl;
    for (int i = 0; i < matrix.size(); i++){
        for (int j = 0; j < matrix[i].size(); j++){
    	    std::cout << "Values["<< i <<"][" << j << "]: \t " << matrix[i][j] << std::endl;
        }
    }
#endif
    return matrix;
}


/*
int main(int argc, char *argv[])
{
    std::vector<std::vector<double> > sequence;
    int type = atoi(argv[1]);
    int N = atoi(argv[2]); 	// If Hadamard, possible N: {2, 4, 8, 16, 32, 64}
    sequence = SequenceGen::getSequence(N, type);
    return 0;
}
*/
